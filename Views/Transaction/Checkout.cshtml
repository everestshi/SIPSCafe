@model IEnumerable<Sips.ViewModels.CartVM>

@{
    ViewData["Title"] = "Checkout";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="checkout-section">
    <h1>Checkout</h1>
    <div class="checkout-container">
        <div class="checkout-items">

            <table class="table">
                <thead>
                    <tr>
                        <th>Item Name</th>
                        <th>Price</th>
                        <th>Quantity</th>
                    </tr>
                </thead>                
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                            <td><button class="btn btn-outline-dark" data-modal="myModal" itemid="@item.ItemId">@item.Name</button></td>
                            <td class="subtotal-amount">@item.Subtotal</td>
                            <td class="subtotal-qty">@item.Quantity</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
        <div class="checkout-details">
            <div class="order-details">
                <p>Quantity: <span id="grandTotalQty">0</span></p>
                <p>Total: <span id="grandTotalAmount">$0.00</span></p>
                <input type="hidden" value="USD" id="currency" />
                <div id="paypal-button-container"></div>
            </div>
        </div>
    </div>
</div>


<!-- Modals -->
@* @foreach (var item in Model)
{ *@
    <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-scrollable">
            <div class="modal-dialog cart-dialog">
                <div class="modal-content">

                    <div class="modal-header">
                        <h5 class="modal-title">Cart</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>

                    <div id="cart-container" class="modal-body cart-container">
                    </div>                    

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary">Understood</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
@* }
 *@
<script src="https://www.paypal.com/sdk/js?client-id=@ViewData["PayPalClientId"]"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {

        // Get all buttons with the class "btn-outline-dark"
        var buttons = document.querySelectorAll('.btn-outline-dark');

        //Add event listener to each button
        buttons.forEach(function (button) {
            button.addEventListener('click', function () {
                // Get the modal ID from the button's data-modal attribute
                var cartContainer = document.getElementById('cart-container');
                cartContainer.innerHTML = '';

                var modalId = button.getAttribute('data-modal');
                var itemId = button.getAttribute('itemId');

                fetch('/Transaction/GetCartItems?itemId=' + itemId, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        // Add any other headers if needed
                    },
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Process the data returned from the server
                        console.log(JSON.stringify(data));
                        if (data && data.length > 0) {

                            data.forEach(item => {
                                // Create elements and append them to the cart container
                                var itemElement = document.createElement('div');
                                itemElement.innerHTML = `
                                    <h5>${item.name}</h5>
                                    <p>Sweetness: ${item.sweetnessPercent}</p>
                                    <p>Milk: ${item.milkType}</p>
                                    <p>Ice: ${item.icePercent}</p>
                                    <div class="add-ins">
                                    <p style="font-weight:bold">Add-Ins: </p>
                                    ${item.addInNames.map(addIn => `<p>${addIn.addInName}</p>`).join('')}
                                    </div>
                                    <h5 class="subtotal">Subtotal: $${item.subtotal}</h5>
                                `;
                                cartContainer.appendChild(itemElement);
                            });
                            alert(itemElement);
                        }

                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });


                    // Display the modal using Bootstrap's modal method
                    var modal = new bootstrap.Modal(document.getElementById(modalId));
                    modal.show();

            });
        });
    });

    // Calculate total when the page loads
    calculateTotal();

    function calculateTotal() {
        var subtotalElements = document.querySelectorAll('.subtotal-amount');
        var subTotalQty = document.querySelectorAll('.subtotal-qty');
        console.log(subTotalQty);
        var grandTotalAmount = 0;
        var grandTotalQty = 0;

        subtotalElements.forEach(function (subtotalElement, index) {
            var subtotal = parseFloat(subtotalElement.textContent.replace('$', ''));
            grandTotalAmount += subtotal;
            var qty = parseInt(subTotalQty[index].textContent);
            grandTotalQty += qty;
        });

        // Display grand total
        document.getElementById('grandTotalAmount').textContent = '$' + grandTotalAmount.toFixed(2);
        document.getElementById('grandTotalQty').textContent = grandTotalQty;

    }
</script>

<script>
    paypal.Buttons({
        // Set up the transaction
        createOrder: function (data, actions) {
            var totalAmount = parseFloat(document.getElementById('grandTotalAmount').innerText);

            return actions.order.create({
                purchase_units: [{
                    amount: {
                        value: totalAmount.toFixed(2), // Format the value as needed
                        currency: 'CAD' // Replace with the appropriate currency code
                    }
                }]
            });
        },

        // Finalize the transaction
        onApprove: function (data, actions) {
            return actions.order.capture().then(function (details) {
                // Prepare transaction details
                const transactionData = {
                    PaymentId: details.id,
                    Amount: details.purchase_units[0].amount.value,
                    Currency: details.purchase_units[0].amount.currency_code,
                    PaymentMethod: 'PayPal',
                    PayerName: details.payer.name.given_name,
                    Create_time: details.create_time,
                    PayerEmail: details.payer.email_address
                };

                // Send transaction details to the server using fetch
                fetch('/Transaction/PaySuccess', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json' // Update Accept header to expect JSON
                    },
                    body: JSON.stringify(transactionData)
                })
                    .then(response => {
                        console.log(response); // Log the raw response
                        // Check if the response is HTML
                        if (response.headers.get('Content-Type').includes('text/html')) {
                            // Handle HTML response
                            return response.text(); // or use response.text() directly
                        }
                        // Otherwise, proceed with JSON parsing
                        return response.json();
                    })
                    .then(responseData => {
                        // Handle the JSON response from the server
                        console.log(responseData);

                        // Check if responseData contains redirectUrl
                        if (responseData.redirectUrl) {
                            // Redirect to the specified URL
                            window.location.href = responseData.redirectUrl;
                        } else {
                            // Handle the response data accordingly
                        }
                    })
                    .catch(error => {
                        // Handle any errors that occur during the fetch
                        console.error('Error:', error);
                    });
            });
        },


        onCancel: function (data) {
            alert('Transaction was cancelled.');
        },
        onError: function (err) {
            alert('An error occurred during the transaction.');
        },
        style: {
            layout: 'horizontal', // 'vertical', 'horizontal'
            color: 'silver',      // 'gold', 'blue', 'silver', 'black'
            shape: 'rect',        // 'rect', 'pill'
            label: 'checkout',    // 'checkout', 'pay', 'buynow', 'paypal'
            fundingicons: false,  // Hide the funding icons (debit/credit card)
        }
    }).render('#paypal-button-container');
</script>
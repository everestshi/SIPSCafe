@model IEnumerable<Sips.ViewModels.CartVM>

@{
    ViewData["Title"] = "Checkout";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="message-container">
    <p class="add-to-cart-message" style="display:none">Item added to cart!</p>
    <p id="remove-from-cart-message" style="display:none">Item removed from cart!</p>
</div>
<div class="checkout-section">
    <h1>Checkout</h1>
    <div class="checkout-container">
        <div class="checkout-items">

            <table class="table">
                <thead>
                    <tr>
                        <th>Item Name</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        @* <th></th> *@
                    </tr>
                </thead>                
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                            <td><button class="btn btn-outline-dark" data-modal="myModal" uniqueitemid="@item.UniqueItemId">@item.Name</button></td>
                            <td class="subtotal-amount">@item.Subtotal</td>
                            <td class="subtotal-qty">@item.Quantity</td>
                            <td><button type="button" onclick="AddOne('@item.UniqueItemId')">+</button></td>
                            <td><button type="button" onclick="RemoveOne('@item.UniqueItemId')">-</button></td> 
                    </tr>
                }
                </tbody>
            </table>
        </div>
        <div class="checkout-details">
            <div class="order-details">
                <p>Quantity: <span id="grandTotalQty">0</span></p>
                <p>Total: <span id="grandTotalAmount">$0.00</span></p>
                <input type="hidden" value="USD" id="currency" />
                <div id="paypal-button-container"></div>
            </div>
        </div>
    </div>
</div>


<!-- Modals -->
@* @foreach (var item in Model)
{ *@
    <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-scrollable">
            <div class="modal-dialog cart-dialog">
                <div class="modal-content">

                    <div class="modal-header">
                        <h5 class="modal-title">Cart</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>

                    <div id="cart-container" class="modal-body cart-container">
                    </div>                    

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary">Understood</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
@* }
 *@
<script src="https://www.paypal.com/sdk/js?client-id=@ViewData["PayPalClientId"]"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {

        // Get all buttons with the class "btn-outline-dark"
        var buttons = document.querySelectorAll('.btn-outline-dark');

        //Add event listener to each button
        buttons.forEach(function (button) {
            button.addEventListener('click', function () {
                // Get the modal ID from the button's data-modal attribute
                var cartContainer = document.getElementById('cart-container');
                cartContainer.innerHTML = '';

                var modalId = button.getAttribute('data-modal');
                var uniqueItemId = button.getAttribute('uniqueitemid');

                fetch('/Transaction/GetCartItems?itemId=' + uniqueItemId, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        // Add any other headers if needed
                    },
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Process the data returned from the server
                        console.log(JSON.stringify(data));
                        if (data && data.length > 0) {
                            data.forEach(item => {
                                // Create elements and append them to the cart container
                                var itemElement = document.createElement('div');
                                itemElement.innerHTML = `
                                <h5>${item.name}</h5>
                                <p>Sweetness: ${item.sweetnessPercent}</p>
                                <p>Milk: ${item.milkType}</p>
                                <p>Ice: ${item.icePercent}</p>
                                <div class="add-ins">
                                    <p style="font-weight:bold">Add-Ins: </p>
                                    ${item.addInNames.map(addIn => `<p>${addIn.addInName}</p>`).join('')}
                                </div>
                                <h5 class="subtotal">Subtotal: $${item.subtotal}</h5>
                                <button type="button" onclick="AddOne('${item.uniqueItemId}')">+</button>
                                <button type="button" onclick="RemoveOne('${item.uniqueItemId}')">-</button>
                                `;
                                cartContainer.appendChild(itemElement);
                            });
                        }

                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });


                    // Display the modal using Bootstrap's modal method
                    var modal = new bootstrap.Modal(document.getElementById(modalId));
                    modal.show();

            });
        });
    });

    // Calculate total when the page loads
    calculateTotal();

    function calculateTotal() {
        var subtotalElements = document.querySelectorAll('.subtotal-amount');
        var subTotalQty = document.querySelectorAll('.subtotal-qty');
        var grandTotalAmount = 0;
        var grandTotalQty = 0;

        subtotalElements.forEach(function (subtotalElement, index) {
            var subtotal = parseFloat(subtotalElement.textContent.replace('$', ''));
            grandTotalAmount += subtotal;
            var qty = parseInt(subTotalQty[index].textContent);
            grandTotalQty += qty;
        });

        // Display grand total
        document.getElementById('grandTotalAmount').textContent = '$' + grandTotalAmount.toFixed(2);
        document.getElementById('grandTotalQty').textContent = grandTotalQty;

    }


    function AddOne(uniqueItemId) {
        fetch(`/Transaction/AddOneToCart`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(uniqueItemId)
        })
            .then(response => response.json()) // Extract JSON from the response
            .then(data => {
                console.log(data);
                if (data && data.newItem) {
                    // You can access newItem properties here and update the UI accordingly
                    console.log(data.newItem);
                    // Example: Update the quantity displayed on the UI
                    document.getElementById('quantityDisplay').textContent = data.newItem.Quantity;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                // Handle errors if the fetch request fails
                // Optionally, display an error message to the user
            });
        // Show the add to cart message
        $('.add-to-cart-message').fadeIn('slow');
        // Set a timeout to hide the message after 5 seconds
        setTimeout(function () {
            $('.add-to-cart-message').fadeOut('slow');
        }, 1500);
    }


// remove same product from cart

    function RemoveOne(uniqueItemId) {
        // Display a confirmation dialog before removing the item
        fetch(`/Transaction/RemoveFromCart`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(uniqueItemId)
        })
            .then(response => {
                if (response.ok) {
                    console.log("Item removed from cart successfully");
                    // Optionally, update the UI to reflect that the item was removed from the cart
                } else {
                    // Handle errors if removal fails
                    console.log('Failed to remove item from cart');
                    // Optionally, display an error message to the user
                }
            })
            .catch(error => {
                console.error('Error:', error);
                // Handle errors if the fetch request fails
                // Optionally, display an error message to the user
            });
        // Show the add to cart message
        $('#remove-from-cart-message').fadeIn('slow');
        // Set a timeout to hide the message after 5 seconds
        setTimeout(function () {
            $('#remove-from-cart-message').fadeOut('slow');
        }, 1500);
    }


    // var iceLabel = document.querySelector('input[name="iceOptions_' + itemId + '"]:checked').nextElementSibling;
    // var ice = iceLabel ? iceLabel.textContent.trim() : '';

    // var sweetnessLabel = document.querySelector('input[name="sweetnessOptions_' + itemId + '"]:checked').nextElementSibling;
    // var sweetness = sweetnessLabel ? sweetnessLabel.textContent.trim() : '';

    // var addInOptions = document.querySelectorAll('input[name="addInOptions_' + itemId + '"]:checked');

    // var milkTypeLabel = document.querySelector('input[name="milkOptions_' + itemId + '"]:checked').nextElementSibling;
    // var milkType = milkTypeLabel ? milkTypeLabel.textContent.trim() : '';
    // var milkPriceModifier = parseFloat(document.querySelector('input[name="milkOptions_' + itemId + '"]:checked').getAttribute('data-price-modifier'));

    // var addInNames = [];
    // addInOptions.forEach(function (option) {
    //     var addInLabel = option.nextElementSibling;
    //     if (addInLabel) {
    //         var addInName = addInLabel.textContent.trim();
    //         addInNames.push({
    //             AddInName: addInName,
    //             // You can add other properties of AddIn here if needed
    //         });
    //     }
    // });

    // var item = {
    //     ItemId: itemId,
    //     BasePrice: parseFloat($('#item-' + itemId + '-price').html()),
    //     SubTotal: parseFloat($('#modalPrice_' + itemId).html()),
    //     Name: $('#item-' + itemId + '-name').html(),
    //     IcePercent: ice,
    //     SweetnessPercent: sweetness,
    //     MilkType: milkType,
    //     AddInNames: addInNames,
    //     Quantity: 1// Assign the populated list of AddInOrderDetail objects
    // };

    // // Get selected options from the modal
    // var modalId = 'customizeModal_' + itemId;
    // var iceOptions = document.querySelectorAll('#' + modalId + ' input[name="iceOptions"]:checked');
    // var sweetnessOptions = document.querySelectorAll('#' + modalId + ' input[name="sweetnessOptions"]:checked');
    // var milkOption = document.querySelector('#' + modalId + ' input[name="milkOptions"]:checked');
    // var addInOptions = document.querySelectorAll('#' + modalId + ' input[name="addInOptions"]:checked');
    // Update item object with selected options
    // if (iceOptions.length > 0) {
    //     item.ice = iceOptions[0].value;
    // }
    // if (sweetnessOptions.length > 0) {
    //     item.sweetness = sweetnessOptions[0].value;
    // }
    // if (milkOption) {
    //     item.milkType = milkOption.value;
    //     item.milkPriceModifier = parseFloat(milkOption.getAttribute('data-price-modifier'));
    // }
    // addInOptions.forEach(function (option) {
    //     item.addInNames.push(option.value);
    //     item.addInPriceModifiers.push(parseFloat(option.getAttribute('data-price-modifier')));
    // });
    // console.log(item);
    // Send item details to the server to add to the cart

</script>

<script>
    paypal.Buttons({
        // Set up the transaction
        createOrder: function (data, actions) {
            var totalAmount = parseFloat(document.getElementById('grandTotalAmount').innerText.replace(/[^\d.-]/g, ''));
            console.log('Total Amount:', totalAmount); // Log the total amount for debugging


            return actions.order.create({
                purchase_units: [{
                    amount: {
                        value: totalAmount.toFixed(2), // Format the value as needed
                        currency: 'CAD' // Replace with the appropriate currency code
                    }
                }]
            });
        },

        // Finalize the transaction
        onApprove: function (data, actions) {
            return actions.order.capture().then(function (details) {
                // Prepare PayPalVM object
                const payPalVM = {
                    TransactionId: details.id,
                    Amount: details.purchase_units[0].amount.value,
                    Currency: details.purchase_units[0].amount.currency_code,
                    PaymentMethod: 'PayPal',
                    PayerName: "",
                    CreatedDate: details.create_time, // Assuming this is in the correct format
                    PayerEmail: details.payer.email_address,
                    isFullfilled: false
                };

                console.log(JSON.stringify(payPalVM));

                // Send PayPalVM object to the server using fetch
                fetch('/Transaction/PaySuccess', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json' // Update Accept header to expect JSON
                    },
                    body: JSON.stringify(payPalVM)
                    
                })
                    .then(response => {
                        console.log(response); // Log the raw response
                        // Check if the response is HTML
                        if (response.headers.get('Content-Type').includes('text/html')) {
                            // Handle HTML response
                            return response.text(); // or use response.text() directly
                        }
                        // Otherwise, proceed with JSON parsing
                        return response.json();
                    })
                    .then(responseData => {
                        // Handle the JSON response from the server
                        console.log(responseData);

                        // Check if responseData contains redirectUrl
                        if (responseData.redirectUrl) {
                            // Redirect to the specified URL
                            window.location.href = responseData.redirectUrl;
                        } else {
                            // Handle the response data accordingly
                        }
                    })
                    .catch(error => {
                        // Handle any errors that occur during the fetch
                        console.error('Error:', error);
                    });
            });
        },


        onCancel: function (data) {
            alert('Transaction was cancelled.');
        },
        onError: function (err) {
            alert('An error occurred during the transaction.');
            console.log(err);
        },
        style: {
            layout: 'horizontal', // 'vertical', 'horizontal'
            color: 'silver',      // 'gold', 'blue', 'silver', 'black'
            shape: 'rect',        // 'rect', 'pill'
            label: 'checkout',    // 'checkout', 'pay', 'buynow', 'paypal'
            fundingicons: false,  // Hide the funding icons (debit/credit card)
        }
    }).render('#paypal-button-container');
</script>
<style>
    .add-to-cart-message, #remove-from-cart-message {
        display: none;
        position: absolute;
        background-color: #E4F2EE;
        color: #519389;
        margin-right: 40px;
        margin-top: 5px;
        padding: 10px;
        border-radius: 5px;
    }

    .message-container {
        display: flex;
        justify-content: flex-end;
    }
</style>
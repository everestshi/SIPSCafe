@* @model IEnumerable<Sips.Models.Item> *@
@model PaginatedList<Item>

@{
    ViewData["Title"] = "ItemIndex";
}

<h1>Products</h1>
@ViewBag.Message

<form asp-action="ItemIndex" method="get">
    <div class="form-actions no-color">
        <p>
            <div class="form-group" style="display: inline-block">
                <span>Search on Product Name or Description:</span>
                <input type="text" name="SearchString"
                       value="@ViewData["currentFilter"]" required />
            </div>
            <div class="form-group" style="display: inline-block">
                <input type="submit" value="Search"
                       class="btn btn-primary" />
            </div>
            <a asp-action="ItemIndex">Back to Full List</a>
        </p>
    </div>
</form>


<p>
    <a asp-action="ItemCreate">Create New Product</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.ActionLink("Product ID", "ItemIndex", new { sortOrder = ViewBag.IDSortParm })
            </th>
            <th>
                @Html.ActionLink("Name", "ItemIndex", new { sortOrder = ViewBag.NameSortParm })
            </th>
            <th>
                Description
                @* @Html.DisplayNameFor(model => model.Description) *@
            </th>
            <th>
                Ice
                @* @Html.DisplayNameFor(model => model.Ice) *@
            </th>
            <th>
                Sweetness
                @* @Html.DisplayNameFor(model => model.Sweetness) *@
            </th>
            <th>
                Base Price
                @* @Html.DisplayNameFor(model => model.BasePrice) *@
            </th>
            <th>
                Inventory
                @* @Html.DisplayNameFor(model => model.Inventory) *@
            </th>
            <th>
                Item Type
                @* @Html.DisplayNameFor(model => model.ItemType) *@
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.PkItemId)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Description)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Ice)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Sweetness)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.BasePrice)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Inventory)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ItemType)
            </td>
            <td>
                <a asp-action="ItemEdit" asp-route-id="@item.PkItemId">Edit</a> |
                <a asp-action="ItemDetails" asp-route-id="@item.PkItemId">Details</a> |
                <a asp-action="ItemDelete" asp-route-id="@item.PkItemId">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>

<nav>
    <ul class="pagination">
        <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
            <a class="page-link"
               href="@Url.Action("Index", new { pageNumber = Model.PageIndex - 1 })">
                Previous
            </a>
        </li>
        <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
            <a class="page-link"
               href="@Url.Action("Index", new { pageNumber = Model.PageIndex + 1 })">
                Next
            </a>
        </li>
    </ul>
</nav>

<a asp-area="" asp-controller="Admin" asp-action="Index">
    <button type="button" class="btn btn-info">Back</button>
</a>

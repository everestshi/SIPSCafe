@model Sips.ViewModels.MenuItemVM

<div class="tea-container">
    <h1>Milk Teas</h1>
    <div>
        <a href="@Url.Action("Slush", "Menu")">
            <h4>Slushes</h4>
        </a>
        <a href="@Url.Action("FruitTea1", "Menu")">
            <h4>Fruit Teas</h4>
        </a>
    </div>
</div>
  <div class="tea-subtotal">
        
            <p>Quantity: <span id="totalQuantity"> 0</span></p>
            <p>Subtotal: <span id="totalAmount"> 0</span></p>

    </div>
</div>
<div class="tea-list">
    @foreach (var tea in Model.Items)
    {
        <div class="tea-item">
            <img src="~/images/boba-02.png" alt="@tea.Name" class="img-fluid">
            <div class="tea-copy">
                <h3>@tea.Name</h3>
                <p>@tea.Description</p>
                <p>Price: $@tea.BasePrice.ToString()</p>
@*                 <button class="btn btn-secondary customize" data-toggle="modal" data-target="#customizeModal" data-price="@tea.BasePrice">Customize</button> *@
            </div>
            @if (User.Identity.IsAuthenticated)
            {
                <div class="tea-btns">
                  @*   <button class="btn btn-primary add-to-cart" id="addButton_@tea.ItemId" onclick="AddOne('@tea.ItemId', '@tea.BasePrice')">Add to Cart</button> *@
                    <button class="btn btn-secondary customize" data-bs-toggle="modal" data-bs-target="#customizeModal_@tea.ItemId" data-price="@tea.BasePrice">Customize</button>
                    <input type="hidden" id="itemPrice_@tea.ItemId" value="@tea.BasePrice" />
                </div>
            }
        </div>
        <!-- Modal -->
        <div class="modal fade" id="customizeModal_@tea.ItemId" tabindex="-1" role="dialog" aria-labelledby="customizeModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="customizeModalLabel">Customize Your Drink</h5>
                        <button type="button" class="close" id="closeModal" data-bs-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <!-- Customization options -->
                        <div class="customization-options">
                            <!-- Ice Level Options -->
                            <div>
                                <h4>Ice Level:</h4>
                                <ul>
                                    @foreach (var option in Model.IceOptions)
                                    {
                                        <li>
                                            <label>
                                                <input type="radio" name="iceOptions" value="@option.IceId" @(option.IcePercent == "Regular Ice" ? "checked" : "")>
                                                @option.IcePercent
                                            </label>
                                        </li>
                                    }
                                </ul>
                            </div>

                            <!-- Sweetness Level Options -->
                            <div>
                                <h4>Sweetness Level:</h4>
                                <ul>
                                    @foreach (var option in Model.SweetnessOptions)
                                    {
                                        <li>
                                            <label>
                                                <input type="radio" name="sweetnessOptions" value="@option.SweetnessId" @(option.SweetnessPercent == "100% Sweet" ? "checked" : "")>
                                                @option.SweetnessPercent
                                            </label>
                                        </li>
                                    }
                                </ul>
                            </div>

                            <!-- Milk Choice Options -->
                            <div>
                                <h4>Milk Choice:</h4>
                                <ul>
                                    @foreach (var option in Model.MilkOptions)
                                    {
                                        <li>
                                            <label>
                                                <input type="radio" name="milkOptions" onchange="AdjustPrice(@tea.BasePrice, @option.PriceModifier, @tea.ItemId, this)" value="@option.MilkChoiceId" @(option.MilkType == "Regular" ? "checked" : "")>
                                                @option.MilkType - $@option.PriceModifier
                                            </label>
                                        </li>
                                    }
                                </ul>
                            </div>

                            <!-- Addon Options -->
                            <div>
                                <h4>Add Ins:</h4>
                                <ul>
                                    @foreach (var option in Model.AddInOptions)
                                    {
                                        <li>
                                            <label>
                                                <input type="checkbox" name="addInOptions" value="@option.AddInId" onchange="AddOnPrice('@option.PriceModifier', '@tea.ItemId', this)">
                                                @option.AddInName - $@option.PriceModifier
                                            </label>
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <p>$<span id="modalPrice_@tea.ItemId">@tea.BasePrice</span></p>
                        <button type="button" class="btn btn-secondary" id="closeModalButton" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary" id="addButton_@tea.ItemId" onclick="AddToCart('@tea.ItemId', '@tea.BasePrice')">Add to Cart</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {

    @* <script>
        document.addEventListener('DOMContentLoaded', function () {
            var customizeButtons = document.querySelectorAll('.customize');
            var modalPrice = document.getElementById('modalPrice');

            customizeButtons.forEach(function (button) {
                button.addEventListener('click', function () {
                    // Get the price from data attribute
                    var price = button.getAttribute('data-price');
                    // Update the modal price
                    modalPrice.textContent = '$' + parseFloat(price).toFixed(2);
                });
            });
        });
    </script> *@
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>

    <!-- Your HTML and JavaScript code -->

    <script>

        var totalQuantity = 0;
        var totalAmount = 0;
        document.addEventListener('DOMContentLoaded', function () {
            var addToCartButtons = document.querySelectorAll('.add-to-cart');
            addToCartButtons.forEach(function (button) {
                button.addEventListener('click', function () {
                    var itemId = button.getAttribute('data-item-id');
                    var price = button.getAttribute('data-price');
                    AddToCart(itemId, price);
                });
            });
        });
        function AddToCart(itemId, price) {
            console.log("function triggered");
            // Collect item details
            var item = {
                itemId: itemId,
                price: parseFloat(price),
                quantity: 1, // Assuming default quantity is 1, adjust as needed
                addInName: "", // Placeholder for add-in name
                addInPriceModifier: 0, // Placeholder for add-in price modifier
                sizeName: "", // Placeholder for size name
                sizePriceModifier: 0, // Placeholder for size price modifier
                sweetness: "", // Placeholder for sweetness level
                ice: "", // Placeholder for ice level
                subtotal: 0, // Placeholder for subtotal
                milkType: "", // Placeholder for milk type
                milkPriceModifier: 0, // Placeholder for milk price modifier
                addInNames: [], // Placeholder for list of add-in names
                addInPriceModifiers: [] // Placeholder for list of add-in price modifiers
            };
            // Get selected options from the modal
            var modalId = 'customizeModal_' + itemId;
            var iceOptions = document.querySelectorAll('#' + modalId + ' input[name="iceOptions"]:checked');
            var sweetnessOptions = document.querySelectorAll('#' + modalId + ' input[name="sweetnessOptions"]:checked');
            var milkOption = document.querySelector('#' + modalId + ' input[name="milkOptions"]:checked');
            var addInOptions = document.querySelectorAll('#' + modalId + ' input[name="addInOptions"]:checked');
            // Update item object with selected options
            if (iceOptions.length > 0) {
                item.ice = iceOptions[0].value;
            }
            if (sweetnessOptions.length > 0) {
                item.sweetness = sweetnessOptions[0].value;
            }
            if (milkOption) {
                item.milkType = milkOption.value;
                item.milkPriceModifier = parseFloat(milkOption.getAttribute('data-price-modifier'));
            }
            addInOptions.forEach(function (option) {
                item.addInNames.push(option.value);
                item.addInPriceModifiers.push(parseFloat(option.getAttribute('data-price-modifier')));
            });
            console.log(item);
            // Send item details to the server to add to the cart
            fetch('/Transaction/AddToCart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(item)
            })
                .then(response => {
                    if (response.ok) {
                        console.log("added to cart");
                        // Optionally, update the UI to reflect that the item was added to the cart
                    } else {
                        // Handle errors if needed
                        console.log('FAIL');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    // Handle errors if needed
                });
        }

        // function AddOne(id, price, currency) {
        //     var totalElement = document.getElementById('totalQuantity');
        //     var total = parseInt(totalElement.textContent);
        //     total += 1;
        //     totalElement.textContent = total;

        //     var itemPrice = parseFloat(price);
        //     var subTotal = total * itemPrice;
        //     document.getElementById('totalAmount').textContent = formatCurrency(subTotal);

        //     // Update grand total
        //     totalQuantity += 1;
        //     totalAmount += itemPrice;

        //     // Display grand total
        //     document.getElementById('totalQuantity').textContent = totalQuantity;
        //     document.getElementById('totalAmount').textContent = formatCurrency(totalAmount);


        //     fetch('/Transaction/AddToCart?id=' + id, {
        //         method: 'GET',
        //         headers: {
        //             // 'Content-Type': 'application/json',
        //             'X-Requested-With': 'XMLHttpRequest'
        //         }
        //         //,
        //         // body: JSON.stringify({ id: 1 })
        //     })
        //         .then(response => {
        //             if (!response.ok) {
        //                 throw new Error('Network response was not ok');
        //             }
        //             return response.json(); // Parse the response body as JSON
        //         })
        //         .then(data => {
        //             console.log(data); // Example output: { Name: "John Doe", Age: 30, Occupation: "Software Developer" }
     
        //         })
        //         .catch(error => {
        //             // Handle errors
        //             console.error('Fetch error:', error);
        //         });
        // }

        function formatCurrency(amount) {
            return '$' + amount.toFixed(2) + ' ' + 'CAD';
        }

        // function to handle milk price modifiers
        function AdjustPrice(price, priceModifier, id, checkbox) {
            var basePrice = document.getElementById("modalPrice_" + id);
            var price = parseFloat(basePrice.textContent);
            var newPrice = price - currentPriceModifier;
            newTotal = newPrice + parseFloat(priceModifier);
            basePrice.textContent = (newTotal).toFixed(2);
            currentPriceModifier = priceModifier;
        }

        // Keep track of the current price modifier
        var currentPriceModifier = 0;

        //function to handle add on price modifiers
        function AddOnPrice(priceModifier, id, checkbox) {
            console.log(checkbox.checked)
            // if checkbox is checked, add the price modifier to the total
            if (checkbox.checked) {
                var basePrice = document.getElementById('modalPrice_' + id);
                console.log(basePrice.textContent);
                var price = parseFloat(basePrice.textContent);
                console.log(price == 4.99);
                var newTotal = price + parseFloat(priceModifier);
                basePrice.textContent = (newTotal).toFixed(2)
            }
            // if checkbox is unchecked, subtract the price modifier from the total
            else {
                var basePrice = document.getElementById('modalPrice_' + id);
                var price = parseFloat(basePrice.textContent);
                var newTotal = price - parseFloat(priceModifier);
                basePrice.textContent = (newTotal).toFixed(2);
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            // Get references to the customize and add to cart buttons
            var customizeButtons = document.querySelectorAll('.customize');
            var addToCartButtons = document.querySelectorAll('.add-to-cart');
            // Add event listener for customize button click
            customizeButtons.forEach(function (button) {
                button.addEventListener('click', function () {
                    // Show the modal
                    document.getElementById('customizeModal').classList.add('show');
                    document.getElementById('customizeModal').style.display = 'block';
                });
            });
            // Add event listener for add to cart button click
            addToCartButtons.forEach(function (button) {
                button.addEventListener('click', function () {
                    // Add your logic to add item to cart here
                    // alert('Item added to cart!');
                });
            });
        });

    </script>
}
<style>
    /* Customize modal appearance */
    .modal-content {
        border-radius: 20px;
        box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.1);
        background-color: #fff;
    }

    .modal-header {
        border-bottom: none;
    }

    .modal-footer {
        border-top: none;
    }

    .customization-options {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        grid-gap: 20px;
    }

        .customization-options h4 {
            font-size: 16px;
            margin-top: 0;
        }

        .customization-options ul {
            list-style: none;
            padding: 0;
        }

        .customization-options label {
            font-size: 14px;
        }

        .customization-options input[type="checkbox"] {
            margin-right: 5px;
        }

    /* Customize close button */
    #closeModal {
        position: absolute;
        top: 10px;
        right: 10px;
        font-size: 24px;
        color: #888;
        border: none;
        background: none;
        cursor: pointer;
    }
</style>